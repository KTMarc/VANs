{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf130
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11400\viewh16160\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Readme VAN Selector\
\
\
Made with those versions: \
Parse version: 1.9.0 \
Parse UI: 1.1.6\
\
We want to have the dataStore enabled, and at the same time be able to pull to refresh from the network (Parse servers) and update the localDataStore.\
\
Used this code:\
\
http://www.freshtilledsoil.com/using-pfquerytableviewcontroller-with-parse-local-datastore-in-swift/\
http://stackoverflow.com/questions/27617164/parse-com-pfquerytableviewcontroller-local-datastore\
\
First time the app runs:\
\
-localDataStore is enabled but empty\
-when we init the 
\b EQLCatalogTableViewController
\b0  the flag to download from server is enabled:  self.
\b shouldUpdateFromServer
\b0 = true;\
-
\b PFQueryTableViewController
\b0  takes care of loading the tableView with the query we specified in the override function: queryForTable\
-Inside 
\b queryForTable
\b0 , we force to read from the 
\b localDataStore
\b0 \
-We read from the localDataStore, and after this a callback is made: 
\b objectsDidLoad\
-
\b0 At this point, we have loaded 0 objects because the datastore was empty, and now it is when we check for the flag
\b  shouldUpdateFromServer 
\b0 and it is true, so we now really go to the network and download asynchronously. And at this point we do a mutable copy of the objects to our 
\b garage model 
\b0 that contains all the trailers in another array to be able to order the tableView by number of horses.\
-The objects are loaded now.\
-We assume that the next time the callback  
\b objectsDidLoad
\b0  will get called, we will want to update the datastore from data form the network again. That\'b4s why we set this to true again: self.shouldUpdateFromServer = true;\
\
\
}